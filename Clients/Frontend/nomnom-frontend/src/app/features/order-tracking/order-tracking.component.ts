// src/app/features/order-tracking/order-tracking.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { Subject, takeUntil, interval, switchMap, startWith } from 'rxjs';
import { OrderService, TrackingInfo } from '../../core/services/order.service';
import { Order } from '../../core/models'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø

@Component({
  selector: 'app-order-tracking',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './order-tracking.component.html',
  styleUrls: ['./order-tracking.component.css']
})
export class OrderTrackingComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  order: Order | null = null;
  trackingInfo: TrackingInfo | null = null;
  loading = true;
  error = '';
  orderId = '';

  constructor(
    private route: ActivatedRoute,
    public router: Router,
    private orderService: OrderService
  ) {}

  ngOnInit(): void {
    this.orderId = this.route.snapshot.params['id'];
    this.loadOrderData();
    this.startTracking();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  loadOrderData(): void {
    this.loading = true;
    this.error = '';

    this.orderService.getOrder(this.orderId).pipe(
      takeUntil(this.destroy$)
    ).subscribe({
      next: (orderResponse) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º OrderResponse –∫–∞–∫ Order (–æ–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã)
        this.order = orderResponse;
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading order:', error);
        this.error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞';
        this.loading = false;
      }
    });
  }

  private startTracking(): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∏–Ω–≥–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    interval(30000).pipe(
      startWith(0),
      switchMap(() => this.orderService.trackOrder(this.orderId)),
      takeUntil(this.destroy$)
    ).subscribe({
      next: (trackingInfo) => {
        this.trackingInfo = trackingInfo;
      },
      error: (error) => {
        console.error('Error tracking order:', error);
      }
    });
  }

  getOrderStatusInfo(status: string) {
    return this.orderService.getOrderStatusDisplay(status);
  }

  formatDeliveryTime(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      day: 'numeric',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  getOrderSteps() {
    const allSteps = [
      { key: 'pending', title: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç', icon: '‚è≥' },
      { key: 'confirmed', title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º', icon: '‚úÖ' },
      { key: 'preparing', title: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è', icon: 'üë®‚Äçüç≥' },
      { key: 'ready', title: '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', icon: 'üì¶' },
      { key: 'picked_up', title: '–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É', icon: 'üöó' },
      { key: 'in_delivery', title: '–í –ø—É—Ç–∏ –∫ –≤–∞–º', icon: 'üöö' },
      { key: 'delivered', title: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', icon: 'üéâ' }
    ];

    const currentStatus = this.order?.status.toLowerCase();
    const statusOrder = ['pending', 'confirmed', 'preparing', 'ready', 'picked_up', 'in_delivery', 'delivered'];
    const currentIndex = statusOrder.indexOf(currentStatus || '');

    return allSteps.map((step, index) => ({
      ...step,
      completed: index < currentIndex,
      active: index === currentIndex,
      time: index === currentIndex ? '–°–µ–π—á–∞—Å' : undefined
    }));
  }

  canCancelOrder(): boolean {
    if (!this.order) return false;
    const status = this.order.status.toLowerCase();
    return ['pending', 'confirmed'].includes(status);
  }

  cancelOrder(): void {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?')) {
      console.log('Cancel order:', this.orderId);
    }
  }

  goBack(): void {
    this.router.navigate(['/profile'], { queryParams: { tab: 'orders' } });
  }
}
