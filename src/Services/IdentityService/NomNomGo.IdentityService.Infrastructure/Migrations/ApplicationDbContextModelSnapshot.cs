// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NomNomGo.IdentityService.Infrastructure.Persistence.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NomNomGo.IdentityService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5cac956-e00c-4a35-b5ed-35598ae4143b"),
                            Name = "ManageUsers"
                        },
                        new
                        {
                            Id = new Guid("b6721810-4e43-4845-82db-87bda55b88db"),
                            Name = "ManageRestaurants"
                        },
                        new
                        {
                            Id = new Guid("87b47ce2-203c-41ba-9509-bc9152ddb45b"),
                            Name = "ManageOrders"
                        },
                        new
                        {
                            Id = new Guid("9fca3c46-dd32-471c-9a89-a4e7a7bd4fe5"),
                            Name = "ViewReports"
                        });
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Relationships.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("da96c1cc-4ffa-4434-a85c-cb822bc8a041"),
                            PermissionId = new Guid("e5cac956-e00c-4a35-b5ed-35598ae4143b")
                        },
                        new
                        {
                            RoleId = new Guid("da96c1cc-4ffa-4434-a85c-cb822bc8a041"),
                            PermissionId = new Guid("b6721810-4e43-4845-82db-87bda55b88db")
                        },
                        new
                        {
                            RoleId = new Guid("da96c1cc-4ffa-4434-a85c-cb822bc8a041"),
                            PermissionId = new Guid("87b47ce2-203c-41ba-9509-bc9152ddb45b")
                        },
                        new
                        {
                            RoleId = new Guid("da96c1cc-4ffa-4434-a85c-cb822bc8a041"),
                            PermissionId = new Guid("9fca3c46-dd32-471c-9a89-a4e7a7bd4fe5")
                        });
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Relationships.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2dce8418-d65d-43e0-84cc-84016bf9a6d0"),
                            RoleId = new Guid("da96c1cc-4ffa-4434-a85c-cb822bc8a041"),
                            Id = new Guid("fa63045d-a390-4e17-8253-20502eb8657c")
                        });
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9d73d27-2c3b-4543-b201-5c2be0673b1d"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("da96c1cc-4ffa-4434-a85c-cb822bc8a041"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("BlockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("\"PhoneNumber\" IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dce8418-d65d-43e0-84cc-84016bf9a6d0"),
                            CreatedAt = new DateTime(2025, 6, 1, 11, 53, 48, 722, DateTimeKind.Utc).AddTicks(5751),
                            Email = "admin@nomnom.local",
                            IsBlocked = false,
                            PasswordHash = "$2b$10$sSK80WLv.MyWGwaZl8PRR.LwJAg4dbjM0sZ5DKEd0spkX340fSuWm",
                            PhoneNumber = "+375447777777",
                            UpdatedAt = new DateTime(2025, 6, 1, 11, 53, 48, 722, DateTimeKind.Utc).AddTicks(5766),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("NomNomGo.IdentityService.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Relationships.RolePermission", b =>
                {
                    b.HasOne("NomNomGo.IdentityService.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NomNomGo.IdentityService.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Relationships.UserRole", b =>
                {
                    b.HasOne("NomNomGo.IdentityService.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NomNomGo.IdentityService.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NomNomGo.IdentityService.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
